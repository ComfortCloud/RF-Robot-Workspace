#!/usr/bin/python
# -*- coding: UTF-8 -*-

import numpy as np
import sys
from numpy import matrix as mat
import random
import function as func
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd

# 载入数据
LengthRestrict = np.array([-0.2,0.2])
WidthRestrict = np.array([0.4,0.8])
HeightRestrict = np.array([0.2,0.6])

# 输入标签实际坐标
TagReal = np.array([0,0.6,0.265])

# 天线读取的坐标
AntennaReal= np.array([[ -0.226833,  0.24, 0.513416],
                       [  -0.22544,  0.24,   0.5409],
                       [    -0.224,  0.24,    0.568],
                       [ -0.222577,  0.24, 0.594755],
                       [ -0.221213,  0.24, 0.621213],
                       [ -0.221213, 0.265, 0.621213],
                       [ -0.221213,  0.29, 0.621213],
                       [ -0.221213, 0.315, 0.621213],
                       [ -0.221213,  0.34, 0.621213],
                       [ -0.221213, 0.365, 0.621213],
                       [ -0.221213,  0.39, 0.621213],
                       [ -0.221213, 0.415, 0.621213],
                       [ -0.221213,  0.44, 0.621213],
                       [ -0.194755,  0.44, 0.622577],
                       [    -0.168,  0.44,    0.624],
                       [   -0.1409,  0.44,  0.62544],
                       [ -0.113416,  0.44, 0.626833],
                       [-0.0855337,  0.44,  0.62809],
                       [-0.0572761,  0.44, 0.629104],
                       [ -0.028721,  0.44, 0.629768],
                       [2.6938e-12,  0.44,     0.63],
                       [  0.028721,  0.44, 0.629768],
                       [ 0.0572761,  0.44, 0.629104],
                       [ 0.0855337,  0.44,  0.62809],
                       [  0.113416,  0.44, 0.626833],
                       [    0.1409,  0.44,  0.62544],
                       [     0.168,  0.44,    0.624],
                       [  0.194755,  0.44, 0.622577],
                       [  0.221213,  0.44, 0.621213],
                       [  0.222577,  0.44, 0.594755],
                       [     0.224,  0.44,    0.568],
                       [   0.22544,  0.44,   0.5409],
                       [  0.226833,  0.44, 0.513416],
                       [   0.22809,  0.44, 0.485534],
                       [  0.229104,  0.44, 0.457276],
                       [  0.229768,  0.44, 0.428721]])

# 导入读取到的相位值
Phase = np.array([344.720553,
                  307.705078,
                   90.820312,
                   51.091496,
                   10.540114,
                   30.430439,
                   45.737592,
                   62.681526,
                   75.193015,
                   86.807812,
                   95.346680,
                  101.100399,
                  105.871582,
                  130.341797,
                  333.738281,
                  355.651325,
                   15.011719,
                  210.911458,
                  222.862120,
                  229.104492,
                  233.203125,
                  232.711694,
                  228.527344,
                  220.087891,
                   28.125000,
                   13.945312,
                  358.056066,
                  340.255490,
                  139.306641,
                    5.395408,
                  230.337358,
                  270.832270,
                  310.160846,
                  350.764724,
                   31.930147,
                   70.150240])

# 数据预处理
# 相位解缠
phaseUnwrapped = func.unwrappingPhase(Phase)

List = np.array(range(Phase.shape[0]))
'''
plt.figure()
plt.scatter(List,Phase)
plt.figure()
plt.scatter(List,phaseUnwrapped),
plt.show()
'''

# LM算法求解
location,error = func.LMConduct(phaseUnwrapped,AntennaReal,0.1,0.5,0.3)
print("The true position is:",TagReal)
print("The predicted position is:",location)
print("error:",error)

